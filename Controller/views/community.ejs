<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css"
      integrity="sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog=="
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="css/community.css" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="icon" href="img/logo.jpg" type="image/jpg" />
    <title>Community | Tutormeister</title>
  </head>
  <% if (message == "Student") { %> <%- include('navBarStudent.ejs') %> <% }
  else { %> <%- include('navBarInstructor.ejs') %> <% } %>
  <body class="body">
    <div class="main">
      <div class="name">
        <span><i class="far fa-user"></i></span>
        <input
          type="text"
          id="name-input"
          class="name-input"
          value="<%= username %>"
          maxlength="20"
          disabled
        />
      </div>

      <ul class="message-container" id="message-container"></ul>

      <form class="message-form" id="message-form">
        <input
          type="text"
          name="message"
          id="message-input"
          class="message-input"
        />
        <div class="v-divider"></div>
        <button type="submit" class="send-button">
          send <span><i class="fas fa-paper-plane"></i></span>
        </button>
      </form>
    </div>
    <h3 class="clients-total" id="client-total">Total Active Users: 2</h3>

    <script src="/socket.io/socket.io.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.28.0/moment.min.js"
      integrity="sha512-Q1f3TS3vSt1jQ8AwP2OuenztnLU6LwxgyyYOG1jgMW/cbEMHps/3wjvnl1P3WTrF3chJUWEoxDUEjMxDV8pujg=="
      crossorigin="anonymous"
    ></script>
    <script>
      console.log("Initializing Socket.IO...");
      const socket = io();

      socket.on("connect", () => {
        console.log("Socket.IO connected successfully.");
      });
      const clientsTotal = document.getElementById("client-total");

      const messageContainer = document.getElementById("message-container");
      const nameInput = document.getElementById("name-input");
      const messageForm = document.getElementById("message-form");
      const messageInput = document.getElementById("message-input");

      const messageTone = new Audio("audio/message-tone.mp3");

      messageForm.addEventListener("submit", (e) => {
        e.preventDefault();
        sendMessage();
      });

      socket.on("clients-total", (data) => {
        clientsTotal.innerText = `Total Active Users: ${data}`;
      });

      function sendMessage() {
        if (messageInput.value === "") return;
        const data = {
          name: nameInput.value,
          message: messageInput.value,
          dateTime: new Date(),
        };
        socket.emit("message", data);
        addMessageToUI(true, data);
        messageInput.value = "";
      }

      socket.on("chat-message", (data) => {
        messageTone.play();
        addMessageToUI(false, data);
      });

      function addMessageToUI(isOwnMessage, data) {
        clearFeedback();
        const element = `
      <li class="${isOwnMessage ? "message-right" : "message-left"}">
          <p class="message">
            ${data.message}
            <span>${data.name} ● ${moment(data.dateTime).fromNow()}</span>
          </p>
        </li>
        `;

        messageContainer.innerHTML += element;
        scrollToBottom();
      }

      function scrollToBottom() {
        messageContainer.scrollTo(0, messageContainer.scrollHeight);
      }

      messageInput.addEventListener("focus", (e) => {
        socket.emit("feedback", {
          feedback: `✍️ ${nameInput.value} is typing a message`,
        });
      });

      messageInput.addEventListener("keypress", (e) => {
        socket.emit("feedback", {
          feedback: `✍️ ${nameInput.value} is typing a message`,
        });
      });
      messageInput.addEventListener("blur", (e) => {
        socket.emit("feedback", {
          feedback: "",
        });
      });

      socket.on("feedback", (data) => {
        clearFeedback();
        const element = `
        <li class="message-feedback">
          <p class="feedback" id="feedback">${data.feedback}</p>
        </li>
  `;
        messageContainer.innerHTML += element;
      });

      function clearFeedback() {
        document.querySelectorAll("li.message-feedback").forEach((element) => {
          element.parentNode.removeChild(element);
        });
      }
    </script>
  </body>
</html>
